<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Groovy | Hack × StrongSoft]]></title>
  <link href="http://sslab.github.com/blog/categories/groovy/atom.xml" rel="self"/>
  <link href="http://sslab.github.com/"/>
  <updated>2011-11-15T10:06:39+08:00</updated>
  <id>http://sslab.github.com/</id>
  <author>
    <name><![CDATA[StrongSoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解決 Gradle dependency 處理速度慢的問題]]></title>
    <link href="http://sslab.github.com/blog/2011/11/15/gradle-dependency-slow-problem/"/>
    <updated>2011-11-15T09:42:00+08:00</updated>
    <id>http://sslab.github.com/blog/2011/11/15/gradle-dependency-slow-problem</id>
    <content type="html"><![CDATA[<p>Gradle 的 dependencies 可以設定 Maven Repository 的套件，
讓 Gradle 自動下載相依的 Jar 檔案。
例如 <a href="http://groovy.codehaus.org/modules/http-builder/">HttpBuilder</a> 的設定範例（build.gradle）：</p>

<p>``` groovy
dependencies {</p>

<pre><code>groovy 'org.codehaus.groovy:groovy-all:1.8.3'
compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.1'
</code></pre>

<p>}
```</p>

<p>但有時候加入了某些相依套件，
會讓建置程序變得超級慢，
因此在 gradle task 執行時，
會卡在「Resolve dependencies」這個訊息很久。</p>

<p>```</p>

<blockquote><p>Building > :compileGroovy > Resolve dependencies ':compile'
```</p></blockquote>

<p>利用以下的指令，可以檢查目前專案依賴的套件共有哪些。</p>

<p><code>
gradle dependencies
</code></p>

<p>執行後將會看到這個輸出結果：</p>

<p>```
compile - Classpath for compiling the main sources.
+--- org.codehaus.groovy:groovy-all:1.8.3 [default]
--- org.codehaus.groovy.modules.http-builder:http-builder:0.5.1 [default]</p>

<pre><code> +--- org.apache.httpcomponents:httpclient:4.0.3 [master,compile,runtime]
 |    +--- org.apache.httpcomponents:httpcore:4.0.1 [master,compile,runtime]
 |    +--- commons-logging:commons-logging:1.1.1 [master,compile,runtime]
 |    \--- commons-codec:commons-codec:1.3 [master,compile,runtime]
 +--- net.sf.json-lib:json-lib:2.3 [master,compile,runtime]
 |    +--- commons-logging:commons-logging:1.1.1 [master,compile,runtime] (*)
 |    +--- commons-beanutils:commons-beanutils:1.8.0 [master,compile,runtime]
 |    |    \--- commons-logging:commons-logging:1.1.1 [master,compile,runtime] (*)
 |    +--- commons-collections:commons-collections:3.2.1 [master,compile,runtime]
 |    +--- commons-lang:commons-lang:2.4 [master,compile,runtime]
 |    \--- net.sf.ezmorph:ezmorph:1.0.6 [master,compile,runtime]
 |         \--- commons-lang:commons-lang:2.4 [master,compile,runtime] (*)
 +--- org.codehaus.groovy:groovy:1.7.10 [master,compile,runtime]
 |    +--- antlr:antlr:2.7.7 [master,compile,runtime]
 |    +--- asm:asm:3.2 [master,compile,runtime]
 |    +--- asm:asm-commons:3.2 [master,compile,runtime]
 |    |    \--- asm:asm-tree:3.2 [master,compile,runtime]
 |    |         \--- asm:asm:3.2 [master,compile,runtime] (*)
 |    +--- asm:asm-util:3.2 [master,compile,runtime]
 |    |    \--- asm:asm-tree:3.2 [master,compile,runtime] (*)
 |    +--- asm:asm-analysis:3.2 [master,compile,runtime]
 |    |    \--- asm:asm-tree:3.2 [master,compile,runtime] (*)
 |    \--- asm:asm-tree:3.2 [master,compile,runtime] (*)
 +--- net.sourceforge.nekohtml:nekohtml:1.9.9 [master,compile,runtime]
 |    \--- xerces:xercesImpl:2.8.1 [master,compile,runtime]
 |         \--- xml-apis:xml-apis:1.3.03 [master,compile,runtime]
 \--- xml-resolver:xml-resolver:1.2 [master,compile,runtime]
</code></pre>

<p>```</p>

<p>從樹狀圖可以發現，
http-builder 依賴的套件中，
groovy:1.7.10 是多餘且冗長的部份。
我們已經在另一行指定 groovy-all:1.8.3 這個版本，
因此可以利用 exclude 設定將 groovy:1.7.10 排除。</p>

<p>``` groovy
dependencies {</p>

<pre><code>groovy 'org.codehaus.groovy:groovy-all:1.8.3'
compile ('org.codehaus.groovy.modules.http-builder:http-builder:0.5.1')  {
    exclude group: 'org.codehaus.groovy', modules: 'groovy'
}
</code></pre>

<p>}
```</p>

<p>再重新執行一次 gradle dependencies，
可以發現樹狀圖變得比較精簡，
而 gradle 執行過程也會加快許多，
不會在 Resolve dependencies 時卡住。</p>

<p>```
+--- org.codehaus.groovy:groovy-all:1.8.3 [default]
--- org.codehaus.groovy.modules.http-builder:http-builder:0.5.1 [default]</p>

<pre><code> +--- org.apache.httpcomponents:httpclient:4.0.3 [master,compile,runtime]
 |    +--- org.apache.httpcomponents:httpcore:4.0.1 [master,compile,runtime]
 |    +--- commons-logging:commons-logging:1.1.1 [master,compile,runtime]
 |    \--- commons-codec:commons-codec:1.3 [master,compile,runtime]
 +--- net.sf.json-lib:json-lib:2.3 [master,compile,runtime]
 |    +--- commons-logging:commons-logging:1.1.1 [master,compile,runtime] (*)
 |    +--- commons-beanutils:commons-beanutils:1.8.0 [master,compile,runtime]
 |    |    \--- commons-logging:commons-logging:1.1.1 [master,compile,runtime] (*)
 |    +--- commons-collections:commons-collections:3.2.1 [master,compile,runtime]
 |    +--- commons-lang:commons-lang:2.4 [master,compile,runtime]
 |    \--- net.sf.ezmorph:ezmorph:1.0.6 [master,compile,runtime]
 |         \--- commons-lang:commons-lang:2.4 [master,compile,runtime] (*)
 +--- net.sourceforge.nekohtml:nekohtml:1.9.9 [master,compile,runtime]
 |    \--- xerces:xercesImpl:2.8.1 [master,compile,runtime]
 |         \--- xml-apis:xml-apis:1.3.03 [master,compile,runtime]
 \--- xml-resolver:xml-resolver:1.2 [master,compile,runtime]
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkdownJ 使用範例（Groovy + Grab）]]></title>
    <link href="http://sslab.github.com/blog/2011/11/13/groovy-grab-markdownj/"/>
    <updated>2011-11-13T09:40:00+08:00</updated>
    <id>http://sslab.github.com/blog/2011/11/13/groovy-grab-markdownj</id>
    <content type="html"><![CDATA[<p><a href="http://lyhdev.com/note:markdown">Markdown</a> 是一種易讀易寫的輕量文字格式。</p>

<p>要將 Markdown 轉換成其他格式，除了命令列的 <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> 工具外，
Java / Groovy 程式可以利用 MarkdownJ 這個函式庫。</p>

<p>在這個 <a href="http://code.google.com/p/markdownj/wiki/Maven">頁面</a> 可以找到 MarkdownJ 的 Maven Repository 來源，
因此加入一行 Groovy 的 Grab 設定：</p>

<p><code>groovy
@GrabResolver(name='scala-tools', root='http://scala-tools.org/repo-releases')
@Grab('org.markdownj:markdownj:0.3.0-1.0.2b4')
</code></p>

<p>接著就可以引用 MarkdownProcessor 類別。</p>

<p><code>groovy
import com.petebevin.markdown.MarkdownProcessor
</code></p>

<p>使用 MarkdownProcessor 的 markdown 方法，可以將一段 Markdown 格式的字串轉換成 HTML 代碼。</p>

<p>``` groovy
def m = new MarkdownProcessor()</p>

<p>println m.markdown('''</p>

<h1>Heading</h1>

<ul>
<li>item1</li>
<li>item2</li>
<li>item3
''')
```</li>
</ul>


<p>範例程式碼可以從 <a href="https://gist.github.com/1361439">Gist</a> 取得。</p>
]]></content>
  </entry>
  
</feed>
